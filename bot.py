import re
import random
import asyncio
from pathlib import Path
import tempfile
from difflib import SequenceMatcher
from tasks import generate_image_task

import pandas as pd
import aiosqlite
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.enums.chat_action import ChatAction
from aiogram.utils.chat_action import ChatActionSender
from aiogram.exceptions import TelegramNetworkError

from config import (
    API_TOKEN, BASE_DIR, EXCEL_PATH, WAIT_VIDEO_PATH, SUB_CHANNEL_USERNAME,
    ADMIN_CHANNEL_USERNAME, ADMIN_IDS, DB_PATH, API_KEYS, MAX_CONCURRENT_TASKS, logger
)
from api import ImageGenerator

# --------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
# --------------------
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–æ—Ç–æ
best_file_id: dict[int, str] = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
generator = ImageGenerator(API_KEYS, bot)

# --------------------
# –°–æ—Å—Ç–æ—è–Ω–∏—è
# --------------------
class Form(StatesGroup):
    check_sub      = State()
    ask_name       = State()
    ask_profession = State()
    choose_gender  = State()
    ask_photo      = State()

# --------------------
# –£—Ç–∏–ª–∏—Ç—ã
# --------------------
def normalize(text: str) -> str:
    t = text.lower()
    t = re.sub(r"[^\w\s]", "", t)
    return re.sub(r"\s+", " ", t).strip()

# --------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
# --------------------
df = pd.read_excel(EXCEL_PATH, sheet_name="–õ–∏—Å—Ç1")
raw_professions = df.iloc[3:, 0].dropna().astype(str).tolist()
professions = [normalize(p) for p in raw_professions]

# --------------------
# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
# --------------------
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        # –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã
        expected_columns = [
            ("user_id", "INTEGER", True),
            ("name", "TEXT", False),
            ("profession", "TEXT", False),
            ("gender", "TEXT", False),
            ("photo_count", "INTEGER", False)
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã
        cursor = await db.execute("PRAGMA table_info(users)")
        columns = await cursor.fetchall()
        column_names = [col[1] for col in columns]
        column_types = {col[1]: col[2] for col in columns}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ö–µ–º–∞ –æ–∂–∏–¥–∞–µ–º–æ–π
        needs_migration = False
        if not column_names:
            # –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            await db.execute(
                """
                CREATE TABLE users (
                    user_id     INTEGER PRIMARY KEY,
                    name        TEXT,
                    profession  TEXT,
                    gender      TEXT,
                    photo_count INTEGER DEFAULT 0
                );
                """
            )
            logger.info("–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ users")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ –∏—Ö —Ç–∏–ø—ã
            for col_name, col_type, is_pk in expected_columns:
                if col_name not in column_names:
                    await db.execute(f"ALTER TABLE users ADD COLUMN {col_name} {col_type}")
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü {col_name} –≤ —Ç–∞–±–ª–∏—Ü—É users")
                elif column_types[col_name].upper() != col_type.upper():
                    needs_migration = True
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–æ–ª–±—Ü–∞ {col_name}: –æ–∂–∏–¥–∞–µ—Ç—Å—è {col_type}, –Ω–∞–π–¥–µ–Ω–æ {column_types[col_name]}")
            
            # –ï—Å–ª–∏ —Å—Ö–µ–º–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
            if needs_migration or column_names != [col[0] for col in expected_columns]:
                logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã users")
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π
                await db.execute(
                    """
                    CREATE TABLE users_temp (
                        user_id     INTEGER PRIMARY KEY,
                        name        TEXT,
                        profession  TEXT,
                        gender      TEXT,
                        photo_count INTEGER DEFAULT 0
                    );
                    """
                )
                # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ, –ø—Ä–µ–æ–±—Ä–∞–∑—É—è —Ç–∏–ø—ã
                await db.execute(
                    """
                    INSERT INTO users_temp (user_id, name, profession, gender, photo_count)
                    SELECT
                        user_id,
                        name,
                        profession,
                        CASE WHEN gender IN ('male', 'female') THEN gender ELSE NULL END,
                        CASE
                            WHEN photo_count IS NULL THEN 0
                            WHEN photo_count GLOB '[0-9]*' THEN CAST(photo_count AS INTEGER)
                            ELSE 0
                        END
                    FROM users;
                    """
                )
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é
                await db.execute("DROP TABLE users")
                await db.execute("ALTER TABLE users_temp RENAME TO users")
                logger.info("–ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã users –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        await db.commit()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

async def get_user(uid: int):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT user_id, name, profession, gender, photo_count FROM users WHERE user_id = ?", (uid,))
        user = await cur.fetchone()
        if user:
            user_dict = {
                "user_id": user[0],
                "name": user[1],
                "profession": user[2],
                "gender": user[3],
                "photo_count": user[4]
            }
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {user_dict}")
            return user_dict
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

async def upsert_user(uid: int, name=None, profession=None, gender=None, inc_photo=False):
    user = await get_user(uid)
    async with aiosqlite.connect(DB_PATH) as db:
        if user:
            if name:
                await db.execute("UPDATE users SET name = ? WHERE user_id = ?", (name, uid))
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {name}")
            if profession:
                await db.execute("UPDATE users SET profession = ? WHERE user_id = ?", (profession, uid))
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {profession}")
            if gender:
                await db.execute("UPDATE users SET gender = ? WHERE user_id = ?", (gender, uid))
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {gender}")
            if inc_photo:
                await db.execute("UPDATE users SET photo_count = photo_count + 1 WHERE user_id = ?", (uid,))
                logger.info(f"–£–≤–µ–ª–∏—á–µ–Ω —Å—á–µ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")
        else:
            await db.execute(
                "INSERT INTO users (user_id, name, profession, gender, photo_count) VALUES (?, ?, ?, ?, ?)",
                (uid, name or "", profession or "", gender or "", 1 if inc_photo else 0)
            )
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}: name={name}, profession={profession}, gender={gender}")
        await db.commit()

# --------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# --------------------
def sub_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_sub"),
        InlineKeyboardButton(text="üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{SUB_CHANNEL_USERNAME.lstrip('@')}" )
    ]])

def retry_prof_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è", callback_data="random_profession")
    ]])

def gender_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–î–ª—è –Ω–µ–≥–æ", callback_data="gender_male"),
        InlineKeyboardButton(text="–î–ª—è –Ω–µ–µ", callback_data="gender_female")
    ]])

def result_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="help"),
        InlineKeyboardButton(text="–î—Ä—É–≥—É—é —Ñ–∏–≥—É—Ä–∫—É", callback_data="another")
    ]])

# --------------------
# –•—ç–Ω–¥–ª–µ—Ä—ã
# --------------------
@dp.startup()
async def on_startup():
    global ADMIN_CHAT_ID
    await init_db()
    chat = await bot.get_chat(ADMIN_CHANNEL_USERNAME)
    ADMIN_CHAT_ID = chat.id
    for _ in range(MAX_CONCURRENT_TASKS):
        asyncio.create_task(generator.worker())
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –≤–æ—Ä–∫–µ—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")

@dp.message(CommandStart())
async def cmd_start(msg: types.Message, state: FSMContext):
    await msg.answer(
        f"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ {SUB_CHANNEL_USERNAME}",
        reply_markup=sub_keyboard()
    )
    await state.set_state(Form.check_sub)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º")

@dp.callback_query(StateFilter(Form.check_sub), F.data == "check_sub")
async def check_sub(call: types.CallbackQuery, state: FSMContext):
    try:
        m = await bot.get_chat_member(SUB_CHANNEL_USERNAME, call.from_user.id)
        ok = m.status in ("creator", "administrator", "member")
    except Exception as e:
        ok = False
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={call.from_user.id}: {e}")
    if ok:
        await call.message.edit_text(
            "–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç. –õ—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏–º—è, —á—Ç–æ–±—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã–ª –±–µ–∑ –æ—à–∏–±–æ–∫"
        )
        await state.set_state(Form.ask_name)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –ø–æ–¥–ø–∏—Å–∞–Ω, –ø–µ—Ä–µ—à–µ–ª –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏")
    else:
        await call.message.edit_text(
            f"–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã, –ø—Ä–æ—Å—å–±–∞ –ø–µ—Ä–µ–π—Ç–∏ –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {SUB_CHANNEL_USERNAME}",
            reply_markup=sub_keyboard()
        )
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω")

@dp.message(StateFilter(Form.ask_name))
async def process_name(msg: types.Message, state: FSMContext):
    await upsert_user(msg.from_user.id, name=msg.text.strip())
    await msg.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é")
    await state.set_state(Form.ask_profession)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –≤–≤–µ–ª –∏–º—è: {msg.text.strip()}")

@dp.message(StateFilter(Form.ask_profession))
async def process_profession(msg: types.Message, state: FSMContext):
    text, best, score = normalize(msg.text), None, 0.0
    for p in professions:
        s = SequenceMatcher(None, text, p).ratio()
        if s > score:
            best, score = p, s
    if score >= 0.75:
        await upsert_user(msg.from_user.id, profession=best)
        await msg.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ, –¥–ª—è –∫–æ–≥–æ —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç", reply_markup=gender_keyboard()
        )
        await state.set_state(Form.choose_gender)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –≤—ã–±—Ä–∞–ª –ø—Ä–æ—Ñ–µ—Å—Å–∏—é: {best}")
    else:
        await msg.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–µ—Ç.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Å–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.",
            reply_markup=retry_prof_keyboard()
        )
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é: {msg.text}")

@dp.callback_query(F.data == "random_profession")
async def random_prof(call: types.CallbackQuery, state: FSMContext):
    prof = random.choice(professions)
    await upsert_user(call.from_user.id, profession=prof)
    await call.message.edit_text(f"–í–∞—à–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è ‚Äî {prof}")
    await call.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ, –¥–ª—è –∫–æ–≥–æ —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç", reply_markup=gender_keyboard()
    )
    await state.set_state(Form.choose_gender)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –ø–æ–ª—É—á–∏–ª —Å–ª—É—á–∞–π–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é: {prof}")

@dp.callback_query(F.data.in_(["gender_male", "gender_female"]))
async def choose_gender(call: types.CallbackQuery, state: FSMContext):
    gender = "male" if call.data == "gender_male" else "female"
    await upsert_user(call.from_user.id, gender=gender)
    await call.message.delete()
    await call.message.answer("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–≥—É—Ä–∫—É, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ –≤ —á–∞—Ç")
    await state.set_state(Form.ask_photo)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –≤—ã–±—Ä–∞–ª –ø–æ–ª: {gender}")

@dp.message(StateFilter(Form.ask_photo), ~F.photo)
async def not_photo(msg: types.Message):
    await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤ –º–µ–¥–∏–∞-—Ñ–æ—Ä–º–∞—Ç–µ")
    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ —Ñ–æ—Ç–æ")

@dp.message(StateFilter(Form.ask_photo), F.photo)
async def process_photo(msg: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    user = await get_user(msg.from_user.id)
    photo_count = int(user["photo_count"]) if user and user["photo_count"] is not None else 0
    if photo_count >= 2:
        await msg.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ —Ñ–æ—Ç–æ (2)")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ —Ñ–æ—Ç–æ")
        return

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await upsert_user(msg.from_user.id, inc_photo=True)
    await msg.answer("–°–æ–∑–¥–∞–µ–º –≤–∞—à—É —Ñ–∏–≥—É—Ä–∫—É\n\n–≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Ä–µ–º—è.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞—Ç–∞")

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    photo = msg.photo[-1]
    file = await bot.get_file(photo.file_id)
    with tempfile.NamedTemporaryFile(dir="/shared_tmp", delete=False, suffix=".jpg") as tmp:
        await bot.download_file(file.file_path, tmp.name)
        image_path = tmp.name
    logger.debug(f"–§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id} —Å–∫–∞—á–∞–Ω–æ: {image_path}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É –≤–∏–¥–µ–æ —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑
    try:
        await bot.send_chat_action(chat_id=msg.chat.id, action=ChatAction.UPLOAD_VIDEO)
        await msg.answer_video(
            FSInputFile(str(WAIT_VIDEO_PATH)),
            supports_streaming=True
        )
        logger.info(f"–í–∏–¥–µ–æ-–∑–∞–≥–ª—É—à–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {msg.from_user.id}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ-–∑–∞–≥–ª—É—à–∫—É: {e}")

    # –°—Ç–∞–≤–∏–º –æ–¥–Ω—É –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    user_data = await get_user(msg.from_user.id)
    profession = user_data["profession"]
    gender     = user_data["gender"]
    generate_image_task.delay(image_path, profession, gender, msg.from_user.id)
    await msg.answer("–í–∞—à–∞ –∑–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏, –∂–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞‚Ä¶")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@dp.callback_query(F.data == "help")
async def help_req(call: types.CallbackQuery):
    uid = call.from_user.id
    await bot.forward_message(
        chat_id=ADMIN_CHAT_ID,
        from_chat_id=call.message.chat.id,
        message_id=call.message.message_id
    )
    await bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=f"HELP –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}"
    )
    await call.answer(
        "–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤–µ—Ä–Ω–µ–º—Å—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–º –æ—à–∏–±–∫—É", show_alert=True
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")

@dp.callback_query(F.data == "another")
async def another_fun(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Ñ–∏–≥—É—Ä–∫–∏")
    await state.set_state(Form.ask_photo)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥—Ä—É–≥—É—é —Ñ–∏–≥—É—Ä–∫—É")

# --------------------
# –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (–∏–∑ —á–∞—Ç–∞)
# --------------------
@dp.message(Command("broadcast"))
async def admin_broadcast(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        await msg.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å /broadcast –±–µ–∑ –ø—Ä–∞–≤.")
        return
    parts = msg.text.split(' ', 1)
    if len(parts) < 2:
        await msg.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç: /broadcast <—Ç–µ–∫—Å—Ç>")
        return
    text = parts[1]
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT user_id FROM users")
        ids = [r[0] for r in await cur.fetchall()]
    success = 0
    for uid in ids:
        try:
            await bot.send_message(chat_id=uid, text=text)
            success += 1
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
    await msg.reply(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {success} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {success} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@dp.message(Command("send"))
async def admin_send(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        await msg.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å /send –±–µ–∑ –ø—Ä–∞–≤.")
        return
    parts = msg.text.split(' ', 2)
    if len(parts) < 3:
        await msg.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send <user_id> <—Ç–µ–∫—Å—Ç>")
        return
    try:
        uid = int(parts[1])
    except ValueError:
        await msg.reply("‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    text = parts[2]
    try:
        await bot.send_message(chat_id=uid, text=text)
        await msg.reply(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}.")
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}.")
    except Exception as e:
        await msg.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e}")
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")

@dp.message(Command("reset"))
async def admin_reset(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        await msg.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å /reset –±–µ–∑ –ø—Ä–∞–≤.")
        return
    parts = msg.text.split(' ', 1)
    if len(parts) < 2:
        await msg.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reset <user_id>")
        return
    try:
        uid = int(parts[1])
    except ValueError:
        await msg.reply("‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET photo_count = 0 WHERE user_id = ?", (uid,))
        await db.commit()
    await msg.reply(f"‚úÖ –°—á–µ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} —Å–±—Ä–æ—à–µ–Ω.")
    logger.info(f"–°—á–µ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}.")

# --------------------
# –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (–∏–∑ –∫–∞–Ω–∞–ª–∞)
# --------------------
@dp.channel_post(Command("broadcast"))
async def channel_broadcast(post: types.Message):
    if post.chat.id != ADMIN_CHAT_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å /broadcast –∏–∑ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {post.chat.id}")
        return
    parts = post.text.split(' ', 1)
    if len(parts) < 2:
        logger.warning("–ö–æ–º–∞–Ω–¥–∞ /broadcast –≤ –∫–∞–Ω–∞–ª–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞.")
        return
    text = parts[1]
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT user_id FROM users")
        ids = [r[0] for r in await cur.fetchall()]
    success = 0
    for uid in ids:
        try:
            await bot.send_message(chat_id=uid, text=text)
            success += 1
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {success} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@dp.channel_post(Command("send"))
async def channel_send(post: types.Message):
    if post.chat.id != ADMIN_CHAT_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å /send –∏–∑ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {post.chat.id}")
        return
    parts = post.text.split(' ', 2)
    if len(parts) < 3:
        logger.warning("–ö–æ–º–∞–Ω–¥–∞ /send –≤ –∫–∞–Ω–∞–ª–µ –±–µ–∑ user_id –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞.")
        return
    try:
        uid = int(parts[1])
    except ValueError:
        logger.warning("–ö–æ–º–∞–Ω–¥–∞ /send –≤ –∫–∞–Ω–∞–ª–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º user_id.")
        return
    text = parts[2]
    try:
        await bot.send_message(chat_id=uid, text=text)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –∏–∑ –∫–∞–Ω–∞–ª–∞.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")

@dp.channel_post(Command("reset"))
async def channel_reset(post: types.Message):
    if post.chat.id != ADMIN_CHAT_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å /reset –∏–∑ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {post.chat.id}")
        return
    parts = post.text.split(' ', 1)
    if len(parts) < 2:
        logger.warning("–ö–æ–º–∞–Ω–¥–∞ /reset –≤ –∫–∞–Ω–∞–ª–µ –±–µ–∑ user_id.")
        return
    try:
        uid = int(parts[1])
    except ValueError:
        logger.warning("–ö–æ–º–∞–Ω–¥–∞ /reset –≤ –∫–∞–Ω–∞–ª–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º user_id.")
        return
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET photo_count = 0 WHERE user_id = ?", (uid,))
        await db.commit()
    logger.info(f"–°—á–µ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} –∏–∑ –∫–∞–Ω–∞–ª–∞.")

if __name__ == "__main__":
    dp.run_polling(bot, skip_updates=True)