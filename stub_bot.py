import os
import ast
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ .env
API_TOKEN = os.getenv("API_TOKEN")
SUB_CHANNEL_USERNAME = os.getenv("SUB_CHANNEL_USERNAME", "").lstrip("@")
ADMIN_CHANNEL_USERNAME = os.getenv("ADMIN_CHANNEL_USERNAME", "").lstrip("@")
# –û–∂–∏–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "[434092620, 386406595]"
ADMIN_IDS = ast.literal_eval(os.getenv("ADMIN_IDS", "[]"))

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

@dp.message(Command("send"))
async def send_message_to_user(msg: types.Message):
    """
    /send <user_id> <text>
    - –≤ –ª–∏—á–∫–µ –±–æ—Ç: —Ç–æ–ª—å–∫–æ –¥–ª—è user_id –∏–∑ ADMIN_IDS
    - –≤ –∫–∞–Ω–∞–ª–µ: —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–∞ —Å username=ADMIN_CHANNEL_USERNAME
    """
    chat_type = msg.chat.type  # —Å—Ç—Ä–æ–∫–∞: "private", "group", "supergroup", "channel"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã
    if chat_type == 'private':
        if msg.from_user.id not in ADMIN_IDS:
            logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —é–∑–µ—Ä {msg.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è /send –≤ –ª–∏—á–∫–µ")
            return
    elif chat_type == 'channel':
        if msg.chat.username != ADMIN_CHANNEL_USERNAME:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ /send –∏–∑ –∫–∞–Ω–∞–ª–∞ @{msg.chat.username} –≤–º–µ—Å—Ç–æ @{ADMIN_CHANNEL_USERNAME}")
            return
    else:
        # –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≥—Ä—É–ø–ø/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø –∑–∞–ø—Ä–µ—â–µ–Ω—ã
        return

    parts = msg.text.split(" ", 2)
    if len(parts) < 3:
        await msg.answer("‚ùóÔ∏è Usage: /send <user_id> <text>")
        logger.warning("–ö–æ–º–∞–Ω–¥–∞ /send –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        return

    try:
        target_id = int(parts[1])
    except ValueError:
        await msg.answer("‚ùóÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id, –æ–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ.")
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π user_id –≤ /send: {parts[1]}")
        return

    text = parts[2]
    try:
        await bot.send_message(chat_id=target_id, text=text)
        confirmation = f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}"
        if chat_type == 'private':
            await msg.answer(confirmation)
        logger.info(confirmation)
    except Exception as e:
        error_msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}: {e}"
        if chat_type == 'private':
            await msg.answer(error_msg)
        logger.error(error_msg)

@dp.message()
async def stub_handler(msg: types.Message):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥—ã /send"""
    if msg.text and msg.text.split()[0].lower() == '/send':
        return

    reply_text = "üì¢ –ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –ö–æ–º–∞–Ω–¥–∞ hh.ru –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç –≤–∞—Å –∑–∞ —É—á–∞—Å—Ç–∏–µ!"
    await msg.answer(reply_text)
    logger.info(f"Stub reply sent to {msg.from_user.id}")

if __name__ == "__main__":
    # skip_updates=True, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã
    dp.run_polling(bot, skip_updates=True)
