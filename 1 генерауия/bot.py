import re
import random
import asyncio
from pathlib import Path
import tempfile
from difflib import SequenceMatcher
from tasks import generate_image_task
from config import ACCESSORIES_FILE, STOP_NAME_WORDS

import pandas as pd
import aiosqlite
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.enums.chat_action import ChatAction
from aiogram.utils.chat_action import ChatActionSender
from aiogram.exceptions import TelegramNetworkError
from config import (
    API_TOKEN, BASE_DIR, WAIT_VIDEO_PATH, SUB_CHANNEL_USERNAME,
    ADMIN_CHANNEL_USERNAME, ADMIN_IDS, DB_PATH, API_KEYS, MAX_CONCURRENT_TASKS, logger
)
from api import ImageGenerator
from typing import Set, Tuple
from celery_app import celery_app
import sqlite3
from aiogram.exceptions import TelegramForbiddenError, TelegramNotFound

processed_media_groups: Set[Tuple[int, str]] = set()

# --------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
# --------------------
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

best_file_id: dict[int, int] = {}

# –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ send_photo, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ
_orig_send_photo = bot.send_photo
async def _send_photo_recorder(chat_id: int, *args, **kwargs):
    msg = await _orig_send_photo(chat_id=chat_id, *args, **kwargs)
    best_file_id[chat_id] = msg.message_id
    return msg
bot.send_photo = _send_photo_recorder  # type: ignore

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
generator = ImageGenerator(API_KEYS, bot)

# --------------------
# –°–æ—Å—Ç–æ—è–Ω–∏—è
# --------------------
class Form(StatesGroup):
    check_sub      = State()
    ask_name       = State()
    ask_profession = State()
    choose_gender  = State()
    ask_photo      = State()

# --------------------
# –£—Ç–∏–ª–∏—Ç—ã
# --------------------
def normalize(text: str) -> str:
    t = text.lower()
    t = re.sub(r"[^\w\s]", "", t)
    return re.sub(r"\s+", " ", t).strip()

disable_web_page_preview=True

# --------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
# --------------------

df = pd.read_excel(ACCESSORIES_FILE)
df.columns = df.columns.str.strip()                         # —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
df["–ü–†–û–§–ï–°–°–ò–Ø"] = df["–ü–†–û–§–ï–°–°–ò–Ø"] \
    .astype(str) \
    .str.replace("/", ",", regex=False)                     # –ø—Ä–∏–≤–æ–¥–∏–º —Å–ª—ç—à–∏ –∫ –∑–∞–ø—è—Ç—ã–º
df = df.assign(
    –ü–†–û–§–ï–°–°–ò–Ø=df["–ü–†–û–§–ï–°–°–ò–Ø"].str.split(",")               # —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π
).explode("–ü–†–û–§–ï–°–°–ò–Ø")                                      # ¬´–≤–∑—Ä—ã–≤–∞–µ–º¬ª —Å—Ç—Ä–æ–∫–∏
df["–ü–†–û–§–ï–°–°–ò–Ø"] = df["–ü–†–û–§–ï–°–°–ò–Ø"].str.strip()               # –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º

raw_professions = df["–ü–†–û–§–ï–°–°–ò–Ø"].dropna().astype(str).tolist()
professions = [ normalize(p) for p in raw_professions ]

# --------------------
# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
# --------------------
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        # –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã
        expected_columns = [
            ("user_id", "INTEGER", True),
            ("name", "TEXT", False),
            ("profession", "TEXT", False),
            ("gender", "TEXT", False),
            ("photo_count", "INTEGER", False)
        ]

        await db.execute("""
            CREATE TABLE IF NOT EXISTS admins (
                user_id INTEGER PRIMARY KEY
            );
        """)
        # –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–µ—ë –≤–∞—à–∏—Ö –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        for admin in ADMIN_IDS:
            await db.execute(
                "INSERT OR IGNORE INTO admins (user_id) VALUES (?)",
                (admin,)
            )
        await db.commit()

        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS users (
                user_id     INTEGER PRIMARY KEY,
                name        TEXT,
                profession  TEXT,
                gender      TEXT,
                photo_count INTEGER DEFAULT 0
            );
            """
        )
        await db.commit()

        # 2) –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É –Ω–µ—ë –ø–æ–ª–µ last_photo_id
        cursor = await db.execute("PRAGMA table_info(users);")
        cols = [row[1] for row in await cursor.fetchall()]
        if "last_photo_id" not in cols:
            await db.execute(
                "ALTER TABLE users ADD COLUMN last_photo_id INTEGER DEFAULT NULL;"
            )
            logger.info("–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü last_photo_id –≤ —Ç–∞–±–ª–∏—Ü—É users")
        await db.commit()

    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

async def is_admin(user_id: int) -> bool:
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "SELECT 1 FROM admins WHERE user_id = ?",
            (user_id,)
        )
        return await cur.fetchone() is not None
    
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

async def get_user(uid: int):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT user_id, name, profession, gender, photo_count FROM users WHERE user_id = ?", (uid,))
        user = await cur.fetchone()
        if user:
            user_dict = {
                "user_id": user[0],
                "name": user[1],
                "profession": user[2],
                "gender": user[3],
                "photo_count": user[4]
            }
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {user_dict}")
            return user_dict
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

async def upsert_user(uid: int, name=None, profession=None, gender=None, inc_photo=False):
    user = await get_user(uid)
    async with aiosqlite.connect(DB_PATH) as db:
        if user:
            if name:
                await db.execute("UPDATE users SET name = ? WHERE user_id = ?", (name, uid))
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {name}")
            if profession:
                await db.execute("UPDATE users SET profession = ? WHERE user_id = ?", (profession, uid))
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {profession}")
            if gender:
                await db.execute("UPDATE users SET gender = ? WHERE user_id = ?", (gender, uid))
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {gender}")
            if inc_photo:
                await db.execute("UPDATE users SET photo_count = photo_count + 1 WHERE user_id = ?", (uid,))
                logger.info(f"–£–≤–µ–ª–∏—á–µ–Ω —Å—á–µ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")
        else:
            await db.execute(
                "INSERT INTO users (user_id, name, profession, gender, photo_count) VALUES (?, ?, ?, ?, ?)",
                (uid, name or "", profession or "", gender or "", 1 if inc_photo else 0)
            )
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}: name={name}, profession={profession}, gender={gender}")
        await db.commit()

# --------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# --------------------
def sub_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_sub"),
        InlineKeyboardButton(text="üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{SUB_CHANNEL_USERNAME.lstrip('@')}" )
    ]])

def retry_prof_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è", callback_data="random_profession")
    ]])

def gender_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–î–ª—è –Ω–µ–≥–æ", callback_data="gender_male"),
        InlineKeyboardButton(text="–î–ª—è –Ω–µ—ë", callback_data="gender_female")
    ]])

def result_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        #InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="help"),
        InlineKeyboardButton(text="–î—Ä—É–≥—É—é —Ñ–∏–≥—É—Ä–∫—É", callback_data="another")
    ]])

# --------------------
# –•—ç–Ω–¥–ª–µ—Ä—ã
# --------------------
@dp.startup()
async def on_startup():
    global ADMIN_CHAT_ID
    await init_db()
    chat = await bot.get_chat(ADMIN_CHANNEL_USERNAME)
    ADMIN_CHAT_ID = chat.id
    for _ in range(MAX_CONCURRENT_TASKS):
        asyncio.create_task(generator.worker())
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –≤–æ—Ä–∫–µ—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")

@dp.message(CommandStart())
async def cmd_start(msg: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –Ω–∞–∂–∞–ª /start ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É")
    try:
        member = await bot.get_chat_member(SUB_CHANNEL_USERNAME, msg.from_user.id)
        if member.status in ("creator", "administrator", "member"):
            # —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –∏–º–µ–Ω–∏
            await msg.answer(
                "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ—ë –∏–º—è, —Ç–∞–∫ –º—ã —Ç–æ—á–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–ø—É—Ç–∞–µ–ºü§≠"
            )
            await state.set_state(Form.ask_name)
            return
        # –∏–Ω–∞—á–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–∑—ã–≤ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        await msg.answer(
            "–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –µ—â—ë –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª. –ê –º—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ—Ä–æ–±–∫—É –¥–ª—è —Ñ–∏–≥—É—Ä–∫–∏ üôå\n"
            "–ñ–º–∏—Ç–µ ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è¬ª, –∞ –∑–∞—Ç–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä—è—Ç—å!",
            reply_markup=sub_keyboard()
        )
        await state.set_state(Form.check_sub)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è {msg.from_user.id}: {e}")
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Ç–æ–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        await msg.answer(
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –≤—Ä—É—á–Ω—É—é:",
            reply_markup=sub_keyboard()
        )
        await state.set_state(Form.check_sub)

    await upsert_user(msg.from_user.id)

@dp.callback_query(StateFilter(Form.check_sub), F.data == "check_sub")
async def on_check_sub(call: types.CallbackQuery, state: FSMContext):
    try:
        member = await bot.get_chat_member(SUB_CHANNEL_USERNAME, call.from_user.id)
        is_sub = member.status in ("creator", "administrator", "member")
    except Exception:
        is_sub = False

    if is_sub:
        # –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî —Å—Ä–∞–∑—É –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏
        await call.message.edit_text(
            "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ—ë –∏–º—è, —Ç–∞–∫ –º—ã —Ç–æ—á–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–ø—É—Ç–∞–µ–ºü§≠"
        )
        await state.set_state(Form.ask_name)
    else:
        # –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –ø—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        await call.message.edit_text(
            "–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–∫–∞ –Ω–µ—Ç ü•∫. –°–∫–æ—Ä–µ–µ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @hh_ru_official, –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º!",
            reply_markup=sub_keyboard()
        )
        await state.set_state(Form.check_sub)

@dp.message(StateFilter(Form.ask_name))
async def process_name(msg: types.Message, state: FSMContext):
    name = msg.text.strip()

    # 1) –°—Ç–æ–ø-—Å–ª–æ–≤–∞ ‚Äî —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
    if name.lower() in STOP_NAME_WORDS:
        # 2) –ü–æ–≤—Ç–æ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –æ—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ask_name
        await msg.answer(
            "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ—ë –∏–º—è, —Ç–∞–∫ –º—ã —Ç–æ—á–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–ø—É—Ç–∞–µ–ºü§≠"
        )
        return

    # 3) –ò–Ω–∞—á–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await upsert_user(msg.from_user.id, name=name)
    await msg.answer(
        "–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ? –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, –∞ –º—ã –ø–æ–∏—â–µ–º –µ—ë –≤ —Å–ø–∏—Å–∫–µ üéØ"
    )
    await state.set_state(Form.ask_profession)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –≤–≤–µ–ª –∏–º—è: {name}")

@dp.message(StateFilter(Form.ask_profession))
async def process_profession(msg: types.Message, state: FSMContext):
    text, best, score = normalize(msg.text), None, 0.0
    for p in professions:
        s = SequenceMatcher(None, text, p).ratio()
        if s > score:
            best, score = p, s
    if score >= 0.75:
        await upsert_user(msg.from_user.id, profession=best)
        await msg.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ, –¥–ª—è –∫–æ–≥–æ —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç", reply_markup=gender_keyboard()
        )
        await state.set_state(Form.choose_gender)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –≤—ã–±—Ä–∞–ª –ø—Ä–æ—Ñ–µ—Å—Å–∏—é: {best}")
    else:
        await msg.answer(
            "–•–º, —Ç–∞–∫–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —É –Ω–∞—Å –Ω–µ—Ç üßê –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=retry_prof_keyboard()
        )
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é: {msg.text}")

@dp.callback_query(F.data == "random_profession")
async def random_prof(call: types.CallbackQuery, state: FSMContext):
    prof = random.choice(professions)
    await upsert_user(call.from_user.id, profession=prof)
    await call.message.edit_text(f"–í–∞—à–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è ‚Äî {prof}")
    await call.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ, –¥–ª—è –∫–æ–≥–æ —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç", reply_markup=gender_keyboard()
    )
    await state.set_state(Form.choose_gender)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –ø–æ–ª—É—á–∏–ª —Å–ª—É—á–∞–π–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é: {prof}")

@dp.callback_query(F.data.in_(["gender_male", "gender_female"]))
async def choose_gender(call: types.CallbackQuery, state: FSMContext):
    gender = "male" if call.data == "gender_male" else "female"
    await upsert_user(call.from_user.id, gender=gender)
    await call.message.delete()
    await call.message.answer(
        "–ü–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–µ —Ñ–æ—Ç–æ! üì∏ –ß—Ç–æ–±—ã —Ñ–∏–≥—É—Ä–∫–∞ –ø–æ–ª—É—á–∏–ª–∞—Å—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂–µ–π, –≤—ã–±–∏—Ä–∞–π—Ç–µ —á—ë—Ç–∫–æ–µ —Å–µ–ª—Ñ–∏ –±–µ–∑ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —Ñ–æ–Ω–µ.\n\n"
        "–í—Å—ë –∫–∞–∫ –≤ —Ö–æ—Ä–æ—à–µ–º —Ä–µ–∑—é–º–µ: —á–µ–º –ª—É—á—à–µ —Ñ–æ—Ç–æ ‚Äî —Ç–µ–º –∫—Ä—É—á–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n"
        "–®–ª–∏—Ç–µ —Å–º–µ–ª–µ–µ ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è, —É –≤–∞—Å –≤ –∑–∞–ø–∞—Å–µ –µ—Å—Ç—å –±–æ–Ω—É—Å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è!\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –±–æ—Ç, –≤—ã –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è "
        "(https://disk.yandex.com/i/1dj8dGtcoYFUxw)",
    disable_web_page_preview=True
    )
    await state.set_state(Form.ask_photo)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –≤—ã–±—Ä–∞–ª –ø–æ–ª: {gender}")

@dp.message(StateFilter(Form.ask_photo), ~F.photo)
async def not_photo(msg: types.Message):
    await msg.answer("–§–æ—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–∫ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∞ –Ω–µ —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑?")
    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ —Ñ–æ—Ç–æ")

@dp.message(StateFilter(Form.ask_photo), F.photo)
async def process_photo(msg: types.Message, state: FSMContext):
    # –µ—Å–ª–∏ —Ñ–æ—Ç–æ –ø—Ä–∏—à–ª–æ –≤ —Å–æ—Å—Ç–∞–≤–µ –∞–ª—å–±–æ–º–∞ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä
    mgid = msg.media_group_id
    if mgid:
        key = (msg.chat.id, mgid)
        if key in processed_media_groups:
            return  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç –∏–∑ —ç—Ç–æ–≥–æ –∂–µ –∞–ª—å–±–æ–º–∞
        processed_media_groups.add(key)
    # –∏–Ω–∞—á–µ (mgid is None) ‚Äî –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ –≤—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    user = await get_user(msg.from_user.id)
    photo_count = int(user["photo_count"]) if user and user["photo_count"] is not None else 0
    if photo_count >= 2:
        await msg.answer("–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏!‚ù§Ô∏è\n\n"
            "–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏.\n\n"
            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–≤—å—Ç–µ —Ñ–∏–≥—É—Ä–∫—É –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫—É –∏ –Ω–µ –º–µ–Ω—è–π—Ç–µ –µ—ë –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π ‚Äî 5 –∏—é–Ω—è! ü§û\n\n"
            "–ê –µ—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç–∞ —Å –±–ª–∏–∑–∫–∏–º–∏ ‚Äî –≤–¥—Ä—É–≥ –æ–Ω–∏ —Ç–æ–∂–µ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–ª–∞—Å—Å–Ω—ã–π –º–µ—Ä—á.\n\n"
            "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∂–º–∏—Ç–µ /help ü•∫")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ —Ñ–æ—Ç–æ")
        return

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await upsert_user(msg.from_user.id, inc_photo=True)
    await msg.answer("–£—Å–ø–µ—Ö! –ú—ã —É–∂–µ —Å–æ–∑–¥–∞—ë–º –≤–∞—à—É —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ñ–∏–≥—É—Ä–∫—É üòé –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –º—ã —Ç—É—Ç –∂–µ –æ–ø–æ–≤–µ—Å—Ç–∏–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏!")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞—Ç–∞")

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    photo = msg.photo[-1]
    file = await bot.get_file(photo.file_id)
    with tempfile.NamedTemporaryFile(dir="/shared_tmp", delete=False, suffix=".jpg") as tmp:
        await bot.download_file(file.file_path, tmp.name)
        image_path = tmp.name
    logger.debug(f"–§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id} —Å–∫–∞—á–∞–Ω–æ: {image_path}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É –≤–∏–¥–µ–æ —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑
    video_file = FSInputFile(str(WAIT_VIDEO_PATH))

    # —Ñ–æ–Ω–æ–≤–∞—è –∫–æ—Ä—É—Ç–∏–Ω–∞, —á—Ç–æ–±—ã –Ω–µ —Ç–æ—Ä–º–æ–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ
    async def _send_placeholder_video():
        try:
            await bot.send_chat_action(chat_id=msg.chat.id, action=ChatAction.UPLOAD_VIDEO)
            await asyncio.wait_for(
                bot.send_video(
                    chat_id=msg.chat.id,
                    video=video_file,
                    supports_streaming=True,
                ),
                timeout=120.0
            )
            logger.info(f"–í–∏–¥–µ–æ-–∑–∞–≥–ª—É—à–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {WAIT_VIDEO_PATH}")
        except asyncio.TimeoutError:
            logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ-–∑–∞–≥–ª—É—à–∫–∏")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ-–∑–∞–≥–ª—É—à–∫—É: {e}")

    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ
    asyncio.create_task(_send_placeholder_video())

    # –°—Ç–∞–≤–∏–º –æ–¥–Ω—É –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    user_data = await get_user(msg.from_user.id)
    profession = user_data["profession"]
    gender     = user_data["gender"]
    generate_image_task.delay(image_path, profession, gender, msg.from_user.id)
    # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å > 10, –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if generator.queue.qsize() > 10:
        await msg.answer(
            "üòÖ–ñ–µ–ª–∞—é—â–∏—Ö –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–∞–∫ –º–Ω–æ–≥–æ, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å —á—É—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏."

        )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


#@dp.callback_query(F.data == "help")
#async def help_req(call: types.CallbackQuery):
#    uid = call.from_user.id
 #   await bot.forward_message(
  #      chat_id=ADMIN_CHAT_ID,
   #     from_chat_id=call.message.chat.id,
    #    message_id=call.message.message_id
    #)
    #await bot.send_message(
     #   chat_id=ADMIN_CHAT_ID,
      #  text=f"HELP –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}"
    #)
    #await call.answer(
    #    "–ú—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à—É —Ñ–∏–≥—É—Ä–∫—É –∏ —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º –æ—à–∏–±–∫—É! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ ü§ù", show_alert=True
    #)
    #logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")

@dp.message(Command("help"))
async def cmd_help(msg: types.Message):
    uid = msg.from_user.id
    # 1) –¥–æ—Å—Ç–∞—ë–º –∏–∑ –ë–î –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—è –ø–æ—Å–ª–µ–¥–Ω–∏–π message_id –¥–ª—è —Ñ–æ—Ç–æ
    photo_id = None
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "SELECT last_photo_id FROM users WHERE user_id = ?;",
            (uid,)
        )
        row = await cur.fetchone()
        if row:
            photo_id = row[0]

    if photo_id:
        # 2) —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∞–º–æ —Ñ–æ—Ç–æ
        await bot.forward_message(
            chat_id=ADMIN_CHAT_ID,
            from_chat_id=uid,
            message_id=photo_id
        )
        # 3) –∑–∞—Ç–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —à–ª—ë–º user_id
        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"User ID: {uid}"
        )
    else:
        # –µ—Å–ª–∏ —Ñ–æ—Ç–æ –µ—â—ë –Ω–µ—Ç ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —ç—Ç–æ–º –∞–¥–º–∏–Ω—É
        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"HELP-–∑–∞–ø—Ä–æ—Å –æ—Ç {uid}, –Ω–æ —Ñ–æ—Ç–æ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å."
        )
        await msg.answer("–§–æ—Ç–æ –µ—â—ë –Ω–µ –±—ã–ª–æ ‚Äî —Å–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –µ–≥–æ, –∞ –ø–æ—Ç–æ–º /help.")
        return

    # 4) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç
    await msg.answer(
        "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à—É —Ñ–∏–≥—É—Ä–∫—É! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ ü§ù"
    )
    logger.info(f"/help –æ—Ç {uid}: –ø–µ—Ä–µ—Å–ª–∞–Ω–æ —Ñ–æ—Ç–æ {photo_id} –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


@dp.callback_query(F.data == "another")
async def another_fun(call: types.CallbackQuery, state: FSMContext):
    uid = call.from_user.id

    # 1) –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ö–æ–¥–µ
    await state.clear()
    # (–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ —Ñ–æ—Ç–æ ‚Äî –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –≤–∞—à /reset-—Ö—ç–Ω–¥–ª–µ—Ä –∑–¥–µ—Å—å, 
    # –ª–∏–±–æ –Ω–∞–ø—Ä—è–º—É—é –æ–±–Ω–æ–≤–∏—Ç—å –ë–î —á–µ—Ä–µ–∑ upsert_user(uid, inc_photo=False))

    # 2) –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å—Ç–∞—Ä—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await call.message.edit_reply_markup(reply_markup=None)

    # 3) –°–Ω–æ–≤–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
    await call.message.answer(
        "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ—ë –∏–º—è, —Ç–∞–∫ –º—ã —Ç–æ—á–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–ø—É—Ç–∞–µ–ºü§≠"
    )
    # 4) –ü–µ—Ä–µ–≤–æ–¥–∏–º FSM –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ask_name
    await state.set_state(Form.ask_name)

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞–ø—Ä–æ—Å–∏–ª –¥—Ä—É–≥—É—é —Ñ–∏–≥—É—Ä–∫—É ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ")

# --------------------
# –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (–∏–∑ —á–∞—Ç–∞)
# --------------------
@dp.message(Command("broadcast"))
async def admin_broadcast(msg: types.Message):
    if not await is_admin(msg.from_user.id):
        await msg.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤")
        return
    parts = msg.text.split(' ', 1)
    if len(parts) < 2:
        await msg.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç: /broadcast <—Ç–µ–∫—Å—Ç>")
        return
    text = parts[1]
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT user_id FROM users")
        ids = [r[0] for r in await cur.fetchall()]
    success = 0
    for uid in ids:
        try:
            await bot.send_message(chat_id=uid, text=text)
            success += 1
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
    await msg.reply(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {success} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {success} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@dp.message(Command("send"))
async def admin_send(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        await msg.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å /send –±–µ–∑ –ø—Ä–∞–≤.")
        return
    parts = msg.text.split(' ', 2)
    if len(parts) < 3:
        await msg.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send <user_id> <—Ç–µ–∫—Å—Ç>")
        return
    try:
        uid = int(parts[1])
    except ValueError:
        await msg.reply("‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    text = parts[2]
    try:
        await bot.send_message(chat_id=uid, text=text)
        await msg.reply(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}.")
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}.")
    except Exception as e:
        await msg.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e}")
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")

@dp.message(Command("reset"))
async def admin_reset(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        await msg.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å /reset –±–µ–∑ –ø—Ä–∞–≤.")
        return
    parts = msg.text.split(' ', 1)
    if len(parts) < 2:
        await msg.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reset <user_id>")
        return
    try:
        uid = int(parts[1])
    except ValueError:
        await msg.reply("‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET photo_count = 0 WHERE user_id = ?", (uid,))
        await db.commit()
    await msg.reply(f"‚úÖ –°—á–µ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} —Å–±—Ä–æ—à–µ–Ω.")
    logger.info(f"–°—á–µ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}.")

# --------------------
# –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (–∏–∑ –∫–∞–Ω–∞–ª–∞)
# --------------------
@dp.message(Command("broadcast"))
async def admin_broadcast(msg: types.Message):
    if not await is_admin(msg.from_user.id):
        await msg.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤")
        return

    parts = msg.text.split(' ', 1)
    if len(parts) < 2:
        await msg.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç: /broadcast <—Ç–µ–∫—Å—Ç>")
        return
    text = parts[1]

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT user_id FROM users")
        ids = [r[0] for r in await cur.fetchall()]

    success = 0
    blocked = 0
    notfound = 0

    for uid in ids:
        try:
            await bot.send_message(chat_id=uid, text=text)
            success += 1

        except TelegramForbiddenError:
            blocked += 1
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")  # –∏–ª–∏ –≤–æ–≤—Å–µ –±–µ–∑ –ª–æ–≥–æ–≤

        except TelegramNotFound:
            notfound += 1
            logger.debug(f"–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {uid} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {uid}: {e}")

    await msg.reply(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞: {success} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, "
        f"{blocked} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞, "
        f"{notfound} —á–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    )

@dp.channel_post(Command("send"))
async def channel_send(post: types.Message):
    if post.chat.id != ADMIN_CHAT_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å /send –∏–∑ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {post.chat.id}")
        return
    parts = post.text.split(' ', 2)
    if len(parts) < 3:
        logger.warning("–ö–æ–º–∞–Ω–¥–∞ /send –≤ –∫–∞–Ω–∞–ª–µ –±–µ–∑ user_id –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞.")
        return
    try:
        uid = int(parts[1])
    except ValueError:
        logger.warning("–ö–æ–º–∞–Ω–¥–∞ /send –≤ –∫–∞–Ω–∞–ª–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º user_id.")
        return
    text = parts[2]
    try:
        await bot.send_message(chat_id=uid, text=text)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –∏–∑ –∫–∞–Ω–∞–ª–∞.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")

@dp.channel_post(Command("reset"))
async def channel_reset(post: types.Message):
    if post.chat.id != ADMIN_CHAT_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å /reset –∏–∑ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {post.chat.id}")
        return
    parts = post.text.split(' ', 1)
    if len(parts) < 2:
        logger.warning("–ö–æ–º–∞–Ω–¥–∞ /reset –≤ –∫–∞–Ω–∞–ª–µ –±–µ–∑ user_id.")
        return
    try:
        uid = int(parts[1])
    except ValueError:
        logger.warning("–ö–æ–º–∞–Ω–¥–∞ /reset –≤ –∫–∞–Ω–∞–ª–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º user_id.")
        return
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET photo_count = 0 WHERE user_id = ?", (uid,))
        await db.commit()
    logger.info(f"–°—á–µ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} –∏–∑ –∫–∞–Ω–∞–ª–∞.")

@dp.message(Command("addadmin"))
async def cmd_addadmin(msg: types.Message):
    # 1) –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Å —Å–∞–º–∏—Ö —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –∞–¥–º–∏–Ω–æ–≤
    if not await is_admin(msg.from_user.id):
        await msg.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # 2) —Ä–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã: –ø–æ—Å–ª–µ /addadmin –∏–¥—ë—Ç –Ω–æ–≤—ã–π ID
    parts = msg.text.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].isdigit():
        await msg.reply("‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω–æ: /addadmin <user_id>")
        return

    new_id = int(parts[1])

    # 3) –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT OR IGNORE INTO admins (user_id) VALUES (?)",
            (new_id,)
        )
        await db.commit()

    # 4) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤ —á–∞—Ç–µ
    await msg.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")


@dp.message(Command("analytics"))
async def cmd_analytics(msg: types.Message):
    if not await is_admin(msg.from_user.id):
        return await msg.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
    
    parts = msg.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        return await msg.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /analytics <user_id>")
    
    uid = int(parts[1])
    user = await get_user(uid)
    if not user:
        return await msg.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –õ–æ–∫–∞–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å
    local_q = generator.queue.qsize()

    # –û—á–µ—Ä–µ–¥—å –≤ celery
    insp = celery_app.control.inspect()
    reserved = insp.reserved() or {}
    scheduled = insp.scheduled() or {}
    reserved_count = sum(len(v) for v in reserved.values())
    scheduled_count = sum(len(v) for v in scheduled.values())

    text = (
        f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}:\n"
        f"‚Äî –ò–º—è: {user['name']}\n"
        f"‚Äî –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {user['profession']}\n"
        f"‚Äî –ü–æ–ª: {user['gender']}\n"
        f"‚Äî –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user['photo_count']} —Ä–∞–∑(–∞)\n\n"
        f"üïê AsyncIO –æ—á–µ—Ä–µ–¥—å: {local_q}\n"
        f"üïê Celery reserved: {reserved_count}\n"
        f"üïê Celery scheduled: {scheduled_count}\n"
        f"‚û°Ô∏è –í—Å–µ–≥–æ –≤ celery: {reserved_count + scheduled_count}"
    )
    await msg.reply(text)

@dp.message(Command("stats"))
async def cmd_stats(msg: types.Message):
    if not await is_admin(msg.from_user.id):
        return await msg.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    async with aiosqlite.connect(DB_PATH) as db:
        # 1) –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å name
        cur = await db.execute("SELECT COUNT(*) FROM users WHERE name != ''")
        count_name = (await cur.fetchone())[0]

        # 2) –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å profession
        cur = await db.execute("SELECT COUNT(*) FROM users WHERE profession != ''")
        count_prof = (await cur.fetchone())[0]

        # 3) –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã–±—Ä–∞–Ω –ø–æ–ª (male –∏–ª–∏ female)
        cur = await db.execute("SELECT COUNT(*) FROM users WHERE gender IN ('male','female')")
        count_gender = (await cur.fetchone())[0]

        # 4) –°–∫–æ–ª—å–∫–æ –∏–∑ –Ω–∏—Ö male –∏ —Å–∫–æ–ª—å–∫–æ female
        cur = await db.execute("""
            SELECT 
              SUM(CASE WHEN gender = 'male' THEN 1 ELSE 0 END),
              SUM(CASE WHEN gender = 'female' THEN 1 ELSE 0 END)
            FROM users
            WHERE gender IN ('male','female')
        """)
        male_count, female_count = (await cur.fetchone())

    # 5) –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã (–µ—Å–ª–∏ count_gender == 0 ‚Äî —Å—Ç–∞–≤–∏–º 0)
    if count_gender > 0:
        male_pct = male_count / count_gender * 100
        female_pct = female_count / count_gender * 100
    else:
        male_pct = female_pct = 0.0

    # 6) –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞c—Ç–∏—è:\n\n"
        f"‚Äî –ù–∞–ø–∏—Å–∞–ª–∏ –∏–º—è: {count_name}\n"
        f"‚Äî –ù–∞–ø–∏—Å–∞–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é: {count_prof}\n\n"
        f"‚Äî –í—ã–±—Ä–∞–ª–∏ –ø–æ–ª: {count_gender}\n"
        f"   ‚Ä¢ –ú ‚Äì {male_count} ({male_pct:.1f}%)\n"
        f"   ‚Ä¢ –ñ ‚Äì {female_count} ({female_pct:.1f}%)"
    )

    await msg.reply(text)
    logger.info(f"–í—ã–¥–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: name={count_name}, prof={count_prof}, gender={count_gender} (M={male_count}, F={female_count})")

@dp.message(Command("export"))
async def cmd_export(msg: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if not await is_admin(msg.from_user.id):
        return await msg.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    # 1) –°—á–∏—Ç—ã–≤–∞–µ–º –≤—Å—é —Ç–∞–±–ª–∏—Ü—É users –≤ DataFrame
    conn = sqlite3.connect(DB_PATH)
    df = pd.read_sql_query(
        "SELECT user_id, name, profession, gender, photo_count, last_photo_id FROM users",
        conn
    )
    conn.close()

    # 2) –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë –≤ Excel
    file_path = "/tmp/users_report.xlsx"
    df.to_excel(file_path, index=False)

    # 3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —á–∞—Ç
    await msg.reply_document(
        FSInputFile(file_path, filename="users_report.xlsx")
    )
    logger.info(f"–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º {msg.from_user.id}")

if __name__ == "__main__":
    dp.run_polling(bot, skip_updates=True)