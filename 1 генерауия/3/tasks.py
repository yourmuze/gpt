# tasks.py

import os
import json
import base64
import random
import logging
import pandas as pd
import re
from config import ACCESSORIES_FILE, PACKAGING_PROMPT_TEMPLATE
import openai
from openai import RateLimitError
import requests
from celery_app import celery_app
from config import API_KEYS, API_TOKEN, DB_PATH, REDIS_URL, REF_MALE, REF_FEMALE
import sqlite3
import redis

logger = logging.getLogger(__name__)

_r = redis.Redis.from_url(REDIS_URL)
def pick_api_key() -> str:
    # atomically incr counter and mod by keys count
    idx = int(_r.incr("api_key_pointer")) % len(API_KEYS)
    logger.info(f"pick_api_key: using key index={idx}")
    return API_KEYS[idx]

def _norm(s: str) -> str:
    t = s.lower()
    t = re.sub(r"[^\w\s]", "", t)
    return re.sub(r"\s+", " ", t).strip()

# –∑–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è ‚Üí —Å–ø–∏—Å–æ–∫ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
_acc_df = pd.read_excel(ACCESSORIES_FILE)
_acc_df.columns = _acc_df.columns.str.strip()
_acc_df["–ü–†–û–§–ï–°–°–ò–Ø"] = _acc_df["–ü–†–û–§–ï–°–°–ò–Ø"] \
    .astype(str) \
    .str.replace("/", ",", regex=False)
_acc_df = _acc_df.assign(
    –ü–†–û–§–ï–°–°–ò–Ø=_acc_df["–ü–†–û–§–ï–°–°–ò–Ø"].str.split(",")
).explode("–ü–†–û–§–ï–°–°–ò–Ø")
_acc_df["–ü–†–û–§–ï–°–°–ò–Ø"] = _acc_df["–ü–†–û–§–ï–°–°–ò–Ø"].str.strip()

# 2) –¢–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∏–º mapping, –¥—É–±–ª–∏—Ä—É—è –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
_accessories_map: dict[str, list[str]] = {}
for _, row in _acc_df.iterrows():
    prof = _norm(row["–ü–†–û–§–ï–°–°–ò–Ø"])
    items: list[str] = []
    for col in _acc_df.columns:
        if col.startswith("–ê–∫—Å–µ—Å—Å—É–∞—Ä_") and isinstance(row[col], str) and row[col].strip():
            items.append(row[col].strip())
    # –µ—Å–ª–∏ –æ–¥–Ω–∞ –∏ —Ç–∞ –∂–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –≤—Å—Ç—Ä–µ—á–∞–ª–∞—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, –ø–æ—Å–ª–µ–¥–Ω–∏–π overwrite –¥—É–±–ª–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫
    _accessories_map[prof] = items

@celery_app.task(
    bind=True,
    name="tasks.generate_image_task",
    autoretry_for=(RateLimitError,),
    retry_backoff=True,
    max_retries=5
)
def generate_image_task(self, image_path: str, profession: str, gender: str, user_id: int) -> None:
    """
    Celery-—Ç–∞—Å–∫: —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
      - image_path: –ø—É—Ç—å –¥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      - profession: –ø—Ä–æ—Ñ–µ—Å—Å–∏—è
      - gender: –ø–æ–ª ("male"/"female")
      - user_id: Telegram ID
    """
    api_key = pick_api_key()
    openai.api_key = api_key
    
    norm_prof = _norm(profession)
    acc_list = _accessories_map.get(norm_prof, [])

    # –≤—ã–±–∏—Ä–∞–µ–º —Ä–æ–≤–Ω–æ 6 —à—Ç—É–∫ (—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏, –µ—Å–ª–∏ –º–∞–ª–æ)
    if len(acc_list) >= 6:
        selected = random.sample(acc_list, 6)
    else:
        selected = random.choices(acc_list, k=6)

    # —Å–æ–±–∏—Ä–∞–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π prompt
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT name FROM users WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    conn.close()
    user_name = row[0] if row and row[0] else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
    full_prompt = PACKAGING_PROMPT_TEMPLATE.format(
        profession=profession,
        accessories=", ".join(selected),
        name=user_name
    )
    
    ref_path = REF_MALE if gender == "male" else REF_FEMALE

    # 2. –ó–∞–ø—Ä–æ—Å –∫ OpenAI Image Edit
    try:
        with open(image_path, "rb") as selfie, open(ref_path, "rb") as ref:
            response = openai.images.edit(
                model="gpt-image-1",
                image=[selfie, ref],       # <-- –∑–¥–µ—Å—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
                prompt=full_prompt,
                n=1,
                size="1024x1024",
                quality="medium"
            )
        
    except RateLimitError as e:
        logger.warning(f"[{user_id}] Rate limit exceeded, retrying: {e}")
        # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ retry –ø–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—É
        raise
    except Exception as e:
        logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        # –µ—Å–ª–∏ —Ö–æ—Ç–∏–º —Ä–µ—Ç—Ä–∞–∏—Ç—å—Å—è –∏ –Ω–∞ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏, –º–æ–∂–Ω–æ —Ä–∞—Å–∫–∏–Ω—É—Ç—å —Å—é–¥–∞
        raise self.retry(exc=e)

    # 3. –î–µ–∫–æ–¥–∏—Ä—É–µ–º Base64 –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try:
        image_obj = response.data[0]
        b64 = image_obj.b64_json
        img_bytes = base64.b64decode(b64)
    except Exception as e:
        logger.error(f"[{user_id}] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI: {e}")
        raise self.retry(exc=e)

    result_path = f"{os.path.splitext(image_path)[0]}_result.png"
    try:
        with open(result_path, "wb") as out_f:
            out_f.write(img_bytes)
        logger.info(f"[{user_id}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {result_path}")
    except Exception as e:
        logger.error(f"[{user_id}] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")
        raise self.retry(exc=e)

    # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram —á–µ—Ä–µ–∑ HTTP (requests)
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(
        "SELECT photo_count FROM users WHERE user_id = ?",
        (user_id,)
    )
    row = cur.fetchone()
    conn.close()
    count = row[0] if row else 0

    url = f"https://api.telegram.org/bot{API_TOKEN}/sendPhoto"

    if count > 1:
        caption = (
            "–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏!‚ù§Ô∏è\n\n"
            "–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏.\n\n"
            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–≤—å—Ç–µ —Ñ–∏–≥—É—Ä–∫—É –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫—É –∏ –Ω–µ –º–µ–Ω—è–π—Ç–µ –µ—ë –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π ‚Äî 5 –∏—é–Ω—è! ü§û\n\n"
            "–ê –µ—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç–∞ —Å –±–ª–∏–∑–∫–∏–º–∏ ‚Äî –≤–¥—Ä—É–≥ –æ–Ω–∏ —Ç–æ–∂–µ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–ª–∞—Å—Å–Ω—ã–π –º–µ—Ä—á.\n\n"
            "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∂–º–∏—Ç–µ /help ü•∫"
        ) 
            # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram —á–µ—Ä–µ–∑ HTTP (requests)
    # --- –≥–æ—Ç–æ–≤–∏–º caption –∏ reply_markup –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–æ–º–µ—Ä–∞ –ø–æ–ø—ã—Ç–∫–∏ ---
    if count > 1:
        caption = (
            "–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏!‚ù§Ô∏è\n\n"
            "–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏.\n\n"
            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–≤—å—Ç–µ —Ñ–∏–≥—É—Ä–∫—É –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫—É –∏ –Ω–µ –º–µ–Ω—è–π—Ç–µ –µ—ë –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π ‚Äî 5 –∏—é–Ω—è! ü§û\n\n"
            "–ê –µ—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç–∞ —Å –±–ª–∏–∑–∫–∏–º–∏ ‚Äî –≤–¥—Ä—É–≥ –æ–Ω–∏ —Ç–æ–∂–µ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–ª–∞—Å—Å–Ω—ã–π –º–µ—Ä—á.\n\n"
            "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∂–º–∏—Ç–µ /help ü•∫"
        )
        reply_markup = None
    else:
        # –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî –¥–∞—ë–º –∫–Ω–æ–ø–∫—É ¬´–î—Ä—É–≥—É—é —Ñ–∏–≥—É—Ä–∫—É¬ª
        caption = (
            "–í–∞—à–∞ —Ñ–∏–≥—É—Ä–∫–∞ –≥–æ—Ç–æ–≤–∞ ü•≥ –°–∫–æ—Ä–µ–µ —Å–∫–∞—á–∏–≤–∞–π—Ç–µ, —Å—Ç–∞–≤—å—Ç–µ –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫—É –≤ Telegram –∏ –Ω–µ –º–µ–Ω—è–π—Ç–µ –¥–æ –∫–æ–Ω—Ü–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ ‚Äî 5 –∏—é–Ω—è!\n\n"
            "–ò –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏, –ø—É—Å—Ç—å —Ç–æ–∂–µ –ø–æ—É—á–∞—Å—Ç–≤—É—é—Ç –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø—Ä–∏–∑–∞!\n\n"
            "–ï—Å–ª–∏ –≤–¥—Ä—É–≥ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–∏—à–∏—Ç–µ /help ü•∫"
        )
        reply_markup = json.dumps({
            "inline_keyboard": [[
                {"text": "–î—Ä—É–≥—É—é —Ñ–∏–≥—É—Ä–∫—É", "callback_data": "another"}
            ]]
        })

    data = {
        "chat_id": user_id,
        "caption": caption,
    }
    if reply_markup:
        data["reply_markup"] = reply_markup

    try:
        with open(result_path, "rb") as photo_f:
            resp = requests.post(
                url,
                data=data,
                files={"photo": photo_f},
                timeout=60
            )
        resp.raise_for_status()
        logger.info(f"[{user_id}] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

        # –û–±–Ω–æ–≤–ª—è–µ–º last_photo_id –≤ –±–∞–∑–µ
        try:
            result = resp.json().get("result", {})
            photo_msg_id = result.get("message_id")
            if photo_msg_id is not None:
                conn = sqlite3.connect(DB_PATH, timeout=10)
                cur = conn.cursor()
                cur.execute(
                    "UPDATE users SET last_photo_id = ? WHERE user_id = ?;",
                    (photo_msg_id, user_id)
                )
                conn.commit()
                conn.close()
                logger.debug(f"[{user_id}] last_photo_id –æ–±–Ω–æ–≤–ª—ë–Ω: {photo_msg_id}")
        except Exception as e:
            logger.warning(f"[{user_id}] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å last_photo_id: {e}")

    except Exception as e:
        logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

    finally:
        # 5. –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for path in (image_path, result_path):
            try:
                os.remove(path)
                logger.debug(f"[{user_id}] –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {path}")
            except Exception as ex:
                logger.warning(f"[{user_id}] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {path}: {ex}")
